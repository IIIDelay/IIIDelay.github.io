const n=JSON.parse(`{"key":"v-417772c7","path":"/en/javabase/juc/juc.html","title":"Java Current Util","lang":"en-US","frontmatter":{"icon":"edit","date":"2023-03-25T00:00:00.000Z","category":["JUC"],"tag":["thread","program","c"],"description":"Java Current Util 锁 1. 悲观锁 适合写操作多的场景, 先加锁可以保证写操作时数据正确 显示的锁定之后再操作同步资源 通俗讲: 认为自己在使用数据的时候一定有别的线程来修改数据, 因此再获取数据的时候会先加锁, 确保数据不会被别的线程修改 synchronized关键字和Lock的实现类都是悲观锁 悲观锁 public synchronized void m1(){ // 加锁后的业务逻辑...... } // 保证多个线程使用的是同一个lock对象的前提下 ReentrantLock lock = new ReentrantLock(); public void m2() { lock.lock(); try { // 操作同步资源 }finally { lock.unlock(); } }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/en/javabase/juc/juc.html"}],["meta",{"property":"og:site_name","content":"IIIDelay's Blog"}],["meta",{"property":"og:title","content":"Java Current Util"}],["meta",{"property":"og:description","content":"Java Current Util 锁 1. 悲观锁 适合写操作多的场景, 先加锁可以保证写操作时数据正确 显示的锁定之后再操作同步资源 通俗讲: 认为自己在使用数据的时候一定有别的线程来修改数据, 因此再获取数据的时候会先加锁, 确保数据不会被别的线程修改 synchronized关键字和Lock的实现类都是悲观锁 悲观锁 public synchronized void m1(){ // 加锁后的业务逻辑...... } // 保证多个线程使用的是同一个lock对象的前提下 ReentrantLock lock = new ReentrantLock(); public void m2() { lock.lock(); try { // 操作同步资源 }finally { lock.unlock(); } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Java Current Util"}],["meta",{"property":"article:author","content":"Mr.IIIDelay"}],["meta",{"property":"article:tag","content":"thread"}],["meta",{"property":"article:tag","content":"program"}],["meta",{"property":"article:tag","content":"c"}],["meta",{"property":"article:published_time","content":"2023-03-25T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java Current Util\\",\\"image\\":[\\"https://mister-hope.github.io/\\"],\\"datePublished\\":\\"2023-03-25T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.IIIDelay\\",\\"url\\":\\"https://mrhope.site\\"}]}"]]},"headers":[{"level":2,"title":"锁","slug":"锁","link":"#锁","children":[]},{"level":2,"title":"Synchronized相关问题","slug":"synchronized相关问题","link":"#synchronized相关问题","children":[]},{"level":2,"title":"可重入锁ReentrantLock及其他显式锁相关问题","slug":"可重入锁reentrantlock及其他显式锁相关问题","link":"#可重入锁reentrantlock及其他显式锁相关问题","children":[]}],"git":{},"readingTime":{"minutes":10.09,"words":3026},"filePathRelative":"en/javabase/juc/juc.md","localizedDate":"March 25, 2023","excerpt":"<h1> Java Current Util</h1>\\n<h2> 锁</h2>\\n<h4> 1. 悲观锁</h4>\\n<blockquote>\\n<p>适合写操作多的场景, 先加锁可以保证写操作时数据正确</p>\\n<ul>\\n<li>显示的锁定之后再操作同步资源</li>\\n</ul>\\n<p>通俗讲: 认为自己在使用数据的时候一定有别的线程来修改数据, 因此再获取数据的时候会先加锁, 确保数据不会被别的线程修改</p>\\n<ul>\\n<li>synchronized关键字和Lock的实现类都是悲观锁</li>\\n</ul>\\n</blockquote>\\n<ul>\\n<li>悲观锁</li>\\n</ul>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">synchronized</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">m1</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 加锁后的业务逻辑......</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 保证多个线程使用的是同一个lock对象的前提下</span>\\n<span class=\\"token class-name\\">ReentrantLock</span> lock <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ReentrantLock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">m2</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    lock<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">lock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 操作同步资源</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token keyword\\">finally</span> <span class=\\"token punctuation\\">{</span>\\n        lock<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">unlock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"Mr.IIIDelay"},"autoDesc":true}`);export{n as data};
