const e=JSON.parse(`{"key":"v-97a04d70","path":"/en/distributed/mqs/rocketmq.html","title":"RocketMQ","lang":"en-US","frontmatter":{"icon":"edit","category":["MQS","Async"],"tag":["Apache","alibaba","open source"],"description":"RocketMQ MQ作用 限流削峰 MQ可以将系统的超量请求暂存其中, 以便系统后期可以慢慢进行处理, 从而避免了请求的丢失或系统被压垮。 异步解耦 上游系统对下游系统的调用若为同步调用, 则会大大降低系统的吞吐量与并发度, 且系统耦合度太高。而异步调用则会解决这些问题。所以两层之间若要实现由同步到异步的转化, 一般性做法就是, 在这两层间添加一个MQ层。 数据收集 分布式系统会产生海量级数据流, 如:业务日志、监控数据、用户行为等。针对这些数据流进行实时或批量采集汇总, 然后对这些数据流进行大数据分析, 这是当前互联网平台的必备技术。通过MQ完成此类数据收集是最好的选择","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/en/distributed/mqs/rocketmq.html"}],["meta",{"property":"og:site_name","content":"IIIDelay's Blog"}],["meta",{"property":"og:title","content":"RocketMQ"}],["meta",{"property":"og:description","content":"RocketMQ MQ作用 限流削峰 MQ可以将系统的超量请求暂存其中, 以便系统后期可以慢慢进行处理, 从而避免了请求的丢失或系统被压垮。 异步解耦 上游系统对下游系统的调用若为同步调用, 则会大大降低系统的吞吐量与并发度, 且系统耦合度太高。而异步调用则会解决这些问题。所以两层之间若要实现由同步到异步的转化, 一般性做法就是, 在这两层间添加一个MQ层。 数据收集 分布式系统会产生海量级数据流, 如:业务日志、监控数据、用户行为等。针对这些数据流进行实时或批量采集汇总, 然后对这些数据流进行大数据分析, 这是当前互联网平台的必备技术。通过MQ完成此类数据收集是最好的选择"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"RocketMQ"}],["meta",{"property":"article:author","content":"Mr.IIIDelay"}],["meta",{"property":"article:tag","content":"Apache"}],["meta",{"property":"article:tag","content":"alibaba"}],["meta",{"property":"article:tag","content":"open source"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RocketMQ\\",\\"image\\":[\\"https://mister-hope.github.io/\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.IIIDelay\\",\\"url\\":\\"https://mrhope.site\\"}]}"]]},"headers":[{"level":2,"title":"MQ作用","slug":"mq作用","link":"#mq作用","children":[]},{"level":2,"title":"架构设计","slug":"架构设计","link":"#架构设计","children":[]},{"level":2,"title":"顺序消息","slug":"顺序消息","link":"#顺序消息","children":[]},{"level":2,"title":"消费幂等","slug":"消费幂等","link":"#消费幂等","children":[]},{"level":2,"title":"消费堆积与消费延迟","slug":"消费堆积与消费延迟","link":"#消费堆积与消费延迟","children":[]},{"level":2,"title":"消息的清理","slug":"消息的清理","link":"#消息的清理","children":[]},{"level":2,"title":"消息重试","slug":"消息重试","link":"#消息重试","children":[]},{"level":2,"title":"死信队列","slug":"死信队列","link":"#死信队列","children":[]},{"level":2,"title":"延迟消息","slug":"延迟消息","link":"#延迟消息","children":[]}],"git":{},"readingTime":{"minutes":13.06,"words":3918},"filePathRelative":"en/distributed/mqs/rocketmq.md","excerpt":"<h1> RocketMQ</h1>\\n<h2> MQ作用</h2>\\n<blockquote>\\n<p>限流削峰</p>\\n<ul>\\n<li>\\n<p>MQ可以将系统的超量请求暂存其中, 以便系统后期可以慢慢进行处理, 从而避免了请求的丢失或系统被压垮。</p>\\n\\n</li>\\n</ul>\\n<p>异步解耦</p>\\n<ul>\\n<li>\\n<p>上游系统对下游系统的调用若为同步调用, 则会大大降低系统的吞吐量与并发度, 且系统耦合度太高。而异步调用则会解决这些问题。所以两层之间若要实现由同步到异步的转化, 一般性做法就是, 在这两层间添加一个MQ层。</p>\\n\\n</li>\\n</ul>\\n<p>数据收集</p>\\n<ul>\\n<li>分布式系统会产生海量级数据流, 如:业务日志、监控数据、用户行为等。针对这些数据流进行实时或批量采集汇总, 然后对这些数据流进行大数据分析, 这是当前互联网平台的必备技术。通过MQ完成此类数据收集是最好的选择</li>\\n</ul>\\n</blockquote>","copyright":{"author":"Mr.IIIDelay"},"autoDesc":true}`);export{e as data};
