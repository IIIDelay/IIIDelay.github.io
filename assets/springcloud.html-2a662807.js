const t=JSON.parse(`{"key":"v-20bc1cdf","path":"/en/mricoservices/springio/springcloud.html","title":"1. 应用架构发展史","lang":"en-US","frontmatter":{"icon":"edit","date":"2023-03-26T00:00:00.000Z","category":["services","cloud"],"tag":["java","distruibted","spring"],"description":"1. 应用架构发展史 随着互联⽹的发展，⽤户群体逐渐扩⼤，⽹站的流量成倍增⻓，常规的单体架构已⽆法满⾜请求压⼒和业务的快速迭代，架构的变化势在必⾏ 1.1 单体应⽤架构 在诞⽣之初，项目的⽤户量、数据量规模都⽐较⼩，项⽬所有的功能模块都放在⼀ 个⼯程中编码、编译、打包并且部署在⼀个Tomcat容器中的架构模式就是单体应⽤ 架构，这样的架构既简单实 ⽤、便于维护，成本⼜低，成为了那个时代的主流架构 ⽅式 image-20230401105233814","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/en/mricoservices/springio/springcloud.html"}],["meta",{"property":"og:site_name","content":"IIIDelay's Blog"}],["meta",{"property":"og:title","content":"1. 应用架构发展史"}],["meta",{"property":"og:description","content":"1. 应用架构发展史 随着互联⽹的发展，⽤户群体逐渐扩⼤，⽹站的流量成倍增⻓，常规的单体架构已⽆法满⾜请求压⼒和业务的快速迭代，架构的变化势在必⾏ 1.1 单体应⽤架构 在诞⽣之初，项目的⽤户量、数据量规模都⽐较⼩，项⽬所有的功能模块都放在⼀ 个⼯程中编码、编译、打包并且部署在⼀个Tomcat容器中的架构模式就是单体应⽤ 架构，这样的架构既简单实 ⽤、便于维护，成本⼜低，成为了那个时代的主流架构 ⽅式 image-20230401105233814"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"1. 应用架构发展史"}],["meta",{"property":"article:author","content":"Mr.IIIDelay"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"distruibted"}],["meta",{"property":"article:tag","content":"spring"}],["meta",{"property":"article:published_time","content":"2023-03-26T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1. 应用架构发展史\\",\\"image\\":[\\"https://mister-hope.github.io/\\"],\\"datePublished\\":\\"2023-03-26T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.IIIDelay\\",\\"url\\":\\"https://mrhope.site\\"}]}"]]},"headers":[],"git":{},"readingTime":{"minutes":1.4,"words":419},"filePathRelative":"en/mricoservices/springio/springcloud.md","localizedDate":"March 26, 2023","excerpt":"<h1> 1. 应用架构发展史</h1>\\n<blockquote>\\n<p>随着互联⽹的发展，⽤户群体逐渐扩⼤，⽹站的流量成倍增⻓，常规的单体架构已⽆法满⾜请求压⼒和业务的快速迭代，架构的变化势在必⾏</p>\\n</blockquote>\\n<h4> 1.1 单体应⽤架构</h4>\\n<blockquote>\\n<p>在诞⽣之初，项目的⽤户量、数据量规模都⽐较⼩，项⽬所有的功能模块都放在⼀ 个⼯程中编码、编译、打包并且部署在⼀个Tomcat容器中的架构模式就是单体应⽤ 架构，这样的架构既简单实 ⽤、便于维护，成本⼜低，成为了那个时代的主流架构 ⽅式</p>\\n<figure><figcaption>image-20230401105233814</figcaption></figure>\\n</blockquote>","copyright":{"author":"Mr.IIIDelay"},"autoDesc":true}`);export{t as data};
