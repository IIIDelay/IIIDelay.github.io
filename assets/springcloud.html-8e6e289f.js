import{_ as e,W as i,X as a,a1 as o}from"./framework-b5ea9e64.js";const l="/assets/image-20230401105233814-ec1e2849.png",t={},c=o('<h1 id="_1-应用架构发展史" tabindex="-1"><a class="header-anchor" href="#_1-应用架构发展史" aria-hidden="true">#</a> 1. 应用架构发展史</h1><blockquote><p>随着互联⽹的发展，⽤户群体逐渐扩⼤，⽹站的流量成倍增⻓，常规的单体架构已⽆法满⾜请求压⼒和业务的快速迭代，架构的变化势在必⾏</p></blockquote><h4 id="_1-1-单体应用架构" tabindex="-1"><a class="header-anchor" href="#_1-1-单体应用架构" aria-hidden="true">#</a> 1.1 单体应⽤架构</h4><blockquote><p>在诞⽣之初，项目的⽤户量、数据量规模都⽐较⼩，项⽬所有的功能模块都放在⼀ 个⼯程中编码、编译、打包并且部署在⼀个Tomcat容器中的架构模式就是单体应⽤ 架构，这样的架构既简单实 ⽤、便于维护，成本⼜低，成为了那个时代的主流架构 ⽅式</p><figure><img src="'+l+'" alt="image-20230401105233814" tabindex="0" loading="lazy"><figcaption>image-20230401105233814</figcaption></figure></blockquote><blockquote><p>优点:</p><ul><li>项⽬前期开发节奏快，团队成员少的时候能够快速迭代</li><li>架构简单：MVC架构，只需要借助IDE开发、调试即可</li><li>易于测试：只需要通过单元测试或者浏览器完成</li><li>易于部署：打包成单⼀可执⾏的jar或者打成war包放到容器内启动</li></ul></blockquote><blockquote><p>缺点:</p><ul><li>随着不断的功能迭代，单个项⽬过⼤，代码杂乱，耦合严重，开发团队逐渐壮⼤ 以后，沟通 成本变⾼， 如：代码从编译到启动耗时达到 3-5 分钟 新增业务困难：在已经乱如麻的系统中增加新业务，维护旧功能，⼀脚踩进去全 是不可预测的问题。新⼈来了以后很难接⼿任务，学习成本⾼，需要⼤概 ⼀周 时间 才能上⼿开发</li><li>核⼼业务与边缘业务混合在⼀块，出现问题互相影响，如：⼀个临时活动流量猛涨，机器负载升⾼就会影响正常的业务服务</li></ul></blockquote>',6),r=[c];function n(s,u){return i(),a("div",null,r)}const d=e(t,[["render",n],["__file","springcloud.html.vue"]]);export{d as default};
